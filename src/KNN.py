import stringfrom sklearn.neighbors import NearestNeighborsfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformerimport pandas as pdimport refrom ast import literal_evalfrom src.Data import Datadef preprocess(df, column_name):    print('shape before process {0}'.format(df.shape))    df.reset_index()    df[column_name] = df[column_name].fillna('')    # Convert text to lowercase    df[column_name] = [str(i).lower() for i in df[column_name]]    # Remove numbers    #df[column_name] = [re.sub(r'\d+', '', str(i)) for i in df[column_name]]    # Remove whitespaces    df[column_name] = [str(i).strip() for i in df[column_name]]    # Remove html tags    df[column_name] = [clean_html_tags(str(i)) for i in df[column_name]]    # Remove punctuation    df[column_name] = [str(i).translate(str.maketrans('', '', string.punctuation)) for i in df[column_name]]    print('shape after process {0}'.format(df.shape))    #print(df.head(10))def clean_html_tags(text):    cleanr = re.compile('<.*?>')    cleantext = re.sub(cleanr, ' ', text)    return cleantextpd.set_option('max_columns', None)data = Data.get_instance()playtime = data.playtimegame_id_name = data.game_id_namesteam_app_data = data.steam_app_datadf = game_id_name.loc[game_id_name['Game_Name'].isin(steam_app_data['Game_Name'])]print('shape after intersection {0}'.format(df.shape))df = pd.merge(df, steam_app_data, on='Game_Name')print('shape after merge {0}'.format(df.shape))print()game_name = 'portal 2'game_name = game_name.lower().replace('[{}]'.format(string.punctuation), ' ').strip('®').strip('™')index = df.loc[df['Game_Name'] == game_name].index[0]column_name = 'about_the_game'preprocess(df, column_name)print()count_vect = CountVectorizer(stop_words = "english")X_train_counts = count_vect.fit_transform(df[column_name])tfidf_transformer = TfidfTransformer()X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)neigh = NearestNeighbors(algorithm='brute', metric='cosine', n_neighbors=10, n_jobs=-1)neigh.fit(X_train_tfidf)test=df.loc[[index]]X_test_counts = count_vect.transform(test[column_name])X_test_tfidf = tfidf_transformer.transform(X_test_counts)distances, indices = neigh.kneighbors(X_test_tfidf)names_similar = pd.Series(indices.flatten()).map(df['Game_Name'])result = pd.DataFrame({'distance': distances.flatten(), 'index': indices.flatten(), 'name': names_similar})print(result)